2024-07-19 10:15:47,297 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.16 (default, Mar  2 2023, 03:21:46) [GCC 11.2.0]
CUDA available: True
GPU 0,1,2,3: NVIDIA Graphics Device
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 11.3, V11.3.109
GCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
PyTorch: 1.10.0+cu111
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.11.0+cu111
OpenCV: 4.10.0
MMCV: 1.6.0
MMCV Compiler: GCC 7.5
MMCV CUDA Compiler: 11.3
MMDetection: 2.24.0
MMSegmentation: 0.24.0
MMDetection3D: 1.0.0rc4+446b7fd
spconv2.0: False
------------------------------------------------------------

2024-07-19 10:15:48,350 - mmdet - INFO - Distributed training: True
2024-07-19 10:15:48,350 - mmdet - INFO - Set random seed to 17, deterministic: False
Name of parameter - Initialization information

img_backbone.patch_embed.projection.weight - torch.Size([128, 3, 4, 4]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.patch_embed.projection.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.patch_embed.norm.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.patch_embed.norm.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.0.blocks.0.norm1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.0.blocks.0.norm1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.0.blocks.0.attn.w_msa.relative_position_bias_table - torch.Size([529, 4]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.0.blocks.0.attn.w_msa.qkv.weight - torch.Size([384, 128]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.0.blocks.0.attn.w_msa.qkv.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.0.blocks.0.attn.w_msa.proj.weight - torch.Size([128, 128]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.0.blocks.0.attn.w_msa.proj.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.0.blocks.0.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.0.blocks.0.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.0.blocks.0.ffn.layers.0.0.weight - torch.Size([512, 128]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.0.blocks.0.ffn.layers.0.0.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.0.blocks.0.ffn.layers.1.weight - torch.Size([128, 512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.0.blocks.0.ffn.layers.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.0.blocks.1.norm1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.0.blocks.1.norm1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.0.blocks.1.attn.w_msa.relative_position_bias_table - torch.Size([529, 4]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.0.blocks.1.attn.w_msa.qkv.weight - torch.Size([384, 128]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.0.blocks.1.attn.w_msa.qkv.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.0.blocks.1.attn.w_msa.proj.weight - torch.Size([128, 128]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.0.blocks.1.attn.w_msa.proj.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.0.blocks.1.norm2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.0.blocks.1.norm2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.0.blocks.1.ffn.layers.0.0.weight - torch.Size([512, 128]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.0.blocks.1.ffn.layers.0.0.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.0.blocks.1.ffn.layers.1.weight - torch.Size([128, 512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.0.blocks.1.ffn.layers.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.0.downsample.norm.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.0.downsample.norm.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.0.downsample.reduction.weight - torch.Size([256, 512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.1.blocks.0.norm1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.1.blocks.0.norm1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.1.blocks.0.attn.w_msa.relative_position_bias_table - torch.Size([529, 8]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.1.blocks.0.attn.w_msa.qkv.weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.1.blocks.0.attn.w_msa.qkv.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.1.blocks.0.attn.w_msa.proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.1.blocks.0.attn.w_msa.proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.1.blocks.0.norm2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.1.blocks.0.norm2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.1.blocks.0.ffn.layers.0.0.weight - torch.Size([1024, 256]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.1.blocks.0.ffn.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.1.blocks.0.ffn.layers.1.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.1.blocks.0.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.1.blocks.1.norm1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.1.blocks.1.norm1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.1.blocks.1.attn.w_msa.relative_position_bias_table - torch.Size([529, 8]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.1.blocks.1.attn.w_msa.qkv.weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.1.blocks.1.attn.w_msa.qkv.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.1.blocks.1.attn.w_msa.proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.1.blocks.1.attn.w_msa.proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.1.blocks.1.norm2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.1.blocks.1.norm2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.1.blocks.1.ffn.layers.0.0.weight - torch.Size([1024, 256]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.1.blocks.1.ffn.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.1.blocks.1.ffn.layers.1.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.1.blocks.1.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.1.downsample.norm.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.1.downsample.norm.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.1.downsample.reduction.weight - torch.Size([512, 1024]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.0.norm1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.0.norm1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.0.attn.w_msa.relative_position_bias_table - torch.Size([529, 16]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.0.attn.w_msa.qkv.weight - torch.Size([1536, 512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.0.attn.w_msa.qkv.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.0.attn.w_msa.proj.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.0.attn.w_msa.proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.0.norm2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.0.norm2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.0.ffn.layers.0.0.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.0.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.0.ffn.layers.1.weight - torch.Size([512, 2048]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.0.ffn.layers.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.1.norm1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.1.norm1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.1.attn.w_msa.relative_position_bias_table - torch.Size([529, 16]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.1.attn.w_msa.qkv.weight - torch.Size([1536, 512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.1.attn.w_msa.qkv.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.1.attn.w_msa.proj.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.1.attn.w_msa.proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.1.norm2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.1.norm2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.1.ffn.layers.0.0.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.1.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.1.ffn.layers.1.weight - torch.Size([512, 2048]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.1.ffn.layers.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.2.norm1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.2.norm1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.2.attn.w_msa.relative_position_bias_table - torch.Size([529, 16]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.2.attn.w_msa.qkv.weight - torch.Size([1536, 512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.2.attn.w_msa.qkv.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.2.attn.w_msa.proj.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.2.attn.w_msa.proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.2.norm2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.2.norm2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.2.ffn.layers.0.0.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.2.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.2.ffn.layers.1.weight - torch.Size([512, 2048]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.2.ffn.layers.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.3.norm1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.3.norm1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.3.attn.w_msa.relative_position_bias_table - torch.Size([529, 16]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.3.attn.w_msa.qkv.weight - torch.Size([1536, 512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.3.attn.w_msa.qkv.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.3.attn.w_msa.proj.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.3.attn.w_msa.proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.3.norm2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.3.norm2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.3.ffn.layers.0.0.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.3.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.3.ffn.layers.1.weight - torch.Size([512, 2048]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.3.ffn.layers.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.4.norm1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.4.norm1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.4.attn.w_msa.relative_position_bias_table - torch.Size([529, 16]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.4.attn.w_msa.qkv.weight - torch.Size([1536, 512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.4.attn.w_msa.qkv.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.4.attn.w_msa.proj.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.4.attn.w_msa.proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.4.norm2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.4.norm2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.4.ffn.layers.0.0.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.4.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.4.ffn.layers.1.weight - torch.Size([512, 2048]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.4.ffn.layers.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.5.norm1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.5.norm1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.5.attn.w_msa.relative_position_bias_table - torch.Size([529, 16]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.5.attn.w_msa.qkv.weight - torch.Size([1536, 512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.5.attn.w_msa.qkv.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.5.attn.w_msa.proj.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.5.attn.w_msa.proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.5.norm2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.5.norm2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.5.ffn.layers.0.0.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.5.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.5.ffn.layers.1.weight - torch.Size([512, 2048]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.5.ffn.layers.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.6.norm1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.6.norm1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.6.attn.w_msa.relative_position_bias_table - torch.Size([529, 16]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.6.attn.w_msa.qkv.weight - torch.Size([1536, 512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.6.attn.w_msa.qkv.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.6.attn.w_msa.proj.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.6.attn.w_msa.proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.6.norm2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.6.norm2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.6.ffn.layers.0.0.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.6.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.6.ffn.layers.1.weight - torch.Size([512, 2048]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.6.ffn.layers.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.7.norm1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.7.norm1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.7.attn.w_msa.relative_position_bias_table - torch.Size([529, 16]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.7.attn.w_msa.qkv.weight - torch.Size([1536, 512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.7.attn.w_msa.qkv.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.7.attn.w_msa.proj.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.7.attn.w_msa.proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.7.norm2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.7.norm2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.7.ffn.layers.0.0.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.7.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.7.ffn.layers.1.weight - torch.Size([512, 2048]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.7.ffn.layers.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.8.norm1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.8.norm1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.8.attn.w_msa.relative_position_bias_table - torch.Size([529, 16]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.8.attn.w_msa.qkv.weight - torch.Size([1536, 512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.8.attn.w_msa.qkv.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.8.attn.w_msa.proj.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.8.attn.w_msa.proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.8.norm2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.8.norm2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.8.ffn.layers.0.0.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.8.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.8.ffn.layers.1.weight - torch.Size([512, 2048]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.8.ffn.layers.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.9.norm1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.9.norm1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.9.attn.w_msa.relative_position_bias_table - torch.Size([529, 16]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.9.attn.w_msa.qkv.weight - torch.Size([1536, 512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.9.attn.w_msa.qkv.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.9.attn.w_msa.proj.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.9.attn.w_msa.proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.9.norm2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.9.norm2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.9.ffn.layers.0.0.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.9.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.9.ffn.layers.1.weight - torch.Size([512, 2048]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.9.ffn.layers.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.10.norm1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.10.norm1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.10.attn.w_msa.relative_position_bias_table - torch.Size([529, 16]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.10.attn.w_msa.qkv.weight - torch.Size([1536, 512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.10.attn.w_msa.qkv.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.10.attn.w_msa.proj.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.10.attn.w_msa.proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.10.norm2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.10.norm2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.10.ffn.layers.0.0.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.10.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.10.ffn.layers.1.weight - torch.Size([512, 2048]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.10.ffn.layers.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.11.norm1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.11.norm1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.11.attn.w_msa.relative_position_bias_table - torch.Size([529, 16]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.11.attn.w_msa.qkv.weight - torch.Size([1536, 512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.11.attn.w_msa.qkv.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.11.attn.w_msa.proj.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.11.attn.w_msa.proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.11.norm2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.11.norm2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.11.ffn.layers.0.0.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.11.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.11.ffn.layers.1.weight - torch.Size([512, 2048]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.11.ffn.layers.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.12.norm1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.12.norm1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.12.attn.w_msa.relative_position_bias_table - torch.Size([529, 16]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.12.attn.w_msa.qkv.weight - torch.Size([1536, 512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.12.attn.w_msa.qkv.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.12.attn.w_msa.proj.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.12.attn.w_msa.proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.12.norm2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.12.norm2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.12.ffn.layers.0.0.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.12.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.12.ffn.layers.1.weight - torch.Size([512, 2048]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.12.ffn.layers.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.13.norm1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.13.norm1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.13.attn.w_msa.relative_position_bias_table - torch.Size([529, 16]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.13.attn.w_msa.qkv.weight - torch.Size([1536, 512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.13.attn.w_msa.qkv.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.13.attn.w_msa.proj.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.13.attn.w_msa.proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.13.norm2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.13.norm2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.13.ffn.layers.0.0.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.13.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.13.ffn.layers.1.weight - torch.Size([512, 2048]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.13.ffn.layers.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.14.norm1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.14.norm1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.14.attn.w_msa.relative_position_bias_table - torch.Size([529, 16]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.14.attn.w_msa.qkv.weight - torch.Size([1536, 512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.14.attn.w_msa.qkv.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.14.attn.w_msa.proj.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.14.attn.w_msa.proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.14.norm2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.14.norm2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.14.ffn.layers.0.0.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.14.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.14.ffn.layers.1.weight - torch.Size([512, 2048]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.14.ffn.layers.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.15.norm1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.15.norm1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.15.attn.w_msa.relative_position_bias_table - torch.Size([529, 16]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.15.attn.w_msa.qkv.weight - torch.Size([1536, 512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.15.attn.w_msa.qkv.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.15.attn.w_msa.proj.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.15.attn.w_msa.proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.15.norm2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.15.norm2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.15.ffn.layers.0.0.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.15.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.15.ffn.layers.1.weight - torch.Size([512, 2048]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.15.ffn.layers.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.16.norm1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.16.norm1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.16.attn.w_msa.relative_position_bias_table - torch.Size([529, 16]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.16.attn.w_msa.qkv.weight - torch.Size([1536, 512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.16.attn.w_msa.qkv.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.16.attn.w_msa.proj.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.16.attn.w_msa.proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.16.norm2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.16.norm2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.16.ffn.layers.0.0.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.16.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.16.ffn.layers.1.weight - torch.Size([512, 2048]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.16.ffn.layers.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.17.norm1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.17.norm1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.17.attn.w_msa.relative_position_bias_table - torch.Size([529, 16]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.17.attn.w_msa.qkv.weight - torch.Size([1536, 512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.17.attn.w_msa.qkv.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.17.attn.w_msa.proj.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.17.attn.w_msa.proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.17.norm2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.17.norm2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.17.ffn.layers.0.0.weight - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.17.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.17.ffn.layers.1.weight - torch.Size([512, 2048]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.blocks.17.ffn.layers.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.downsample.norm.weight - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.downsample.norm.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.2.downsample.reduction.weight - torch.Size([1024, 2048]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.3.blocks.0.norm1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.3.blocks.0.norm1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.3.blocks.0.attn.w_msa.relative_position_bias_table - torch.Size([529, 32]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.3.blocks.0.attn.w_msa.qkv.weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.3.blocks.0.attn.w_msa.qkv.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.3.blocks.0.attn.w_msa.proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.3.blocks.0.attn.w_msa.proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.3.blocks.0.norm2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.3.blocks.0.norm2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.3.blocks.0.ffn.layers.0.0.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.3.blocks.0.ffn.layers.0.0.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.3.blocks.0.ffn.layers.1.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.3.blocks.0.ffn.layers.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.3.blocks.1.norm1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.3.blocks.1.norm1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.3.blocks.1.attn.w_msa.relative_position_bias_table - torch.Size([529, 32]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.3.blocks.1.attn.w_msa.qkv.weight - torch.Size([3072, 1024]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.3.blocks.1.attn.w_msa.qkv.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.3.blocks.1.attn.w_msa.proj.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.3.blocks.1.attn.w_msa.proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.3.blocks.1.norm2.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.3.blocks.1.norm2.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.3.blocks.1.ffn.layers.0.0.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.3.blocks.1.ffn.layers.0.0.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.3.blocks.1.ffn.layers.1.weight - torch.Size([1024, 4096]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.stages.3.blocks.1.ffn.layers.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.norm2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.norm2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.norm3.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_backbone.norm3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_neck.conv.0.weight - torch.Size([512, 1536, 3, 3]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_neck.conv.1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_neck.conv.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_neck.conv.3.weight - torch.Size([512, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_neck.conv.4.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_neck.conv.4.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.reduce_conv.0.weight - torch.Size([512, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.reduce_conv.0.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.reduce_conv.1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.reduce_conv.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.context_conv.weight - torch.Size([32, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.context_conv.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.bn.weight - torch.Size([27]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.bn.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.depth_mlp.fc1.weight - torch.Size([512, 27]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.depth_mlp.fc1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.depth_mlp.fc2.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.depth_mlp.fc2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.depth_se.conv_reduce.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.depth_se.conv_reduce.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.depth_se.conv_expand.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.depth_se.conv_expand.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.context_mlp.fc1.weight - torch.Size([512, 27]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.context_mlp.fc1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.context_mlp.fc2.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.context_mlp.fc2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.context_se.conv_reduce.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.context_se.conv_reduce.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.context_se.conv_expand.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.context_se.conv_expand.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.cost_volumn_net.0.weight - torch.Size([88, 88, 3, 3]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.cost_volumn_net.0.bias - torch.Size([88]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.cost_volumn_net.1.weight - torch.Size([88]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.cost_volumn_net.1.bias - torch.Size([88]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.cost_volumn_net.2.weight - torch.Size([88, 88, 3, 3]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.cost_volumn_net.2.bias - torch.Size([88]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.cost_volumn_net.3.weight - torch.Size([88]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.cost_volumn_net.3.bias - torch.Size([88]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.depth_conv.0.conv1.weight - torch.Size([512, 600, 3, 3]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.depth_conv.0.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.depth_conv.0.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.depth_conv.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.depth_conv.0.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.depth_conv.0.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.depth_conv.0.downsample.weight - torch.Size([512, 600, 1, 1]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.depth_conv.0.downsample.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.depth_conv.1.conv1.weight - torch.Size([512, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.depth_conv.1.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.depth_conv.1.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.depth_conv.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.depth_conv.1.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.depth_conv.1.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.depth_conv.2.conv1.weight - torch.Size([512, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.depth_conv.2.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.depth_conv.2.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.depth_conv.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.depth_conv.2.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.depth_conv.2.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.depth_conv.3.aspp1.atrous_conv.weight - torch.Size([96, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.depth_conv.3.aspp1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.depth_conv.3.aspp1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.depth_conv.3.aspp2.atrous_conv.weight - torch.Size([96, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.depth_conv.3.aspp2.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.depth_conv.3.aspp2.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.depth_conv.3.aspp3.atrous_conv.weight - torch.Size([96, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.depth_conv.3.aspp3.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.depth_conv.3.aspp3.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.depth_conv.3.aspp4.atrous_conv.weight - torch.Size([96, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.depth_conv.3.aspp4.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.depth_conv.3.aspp4.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.depth_conv.3.global_avg_pool.1.weight - torch.Size([96, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.depth_conv.3.global_avg_pool.2.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.depth_conv.3.global_avg_pool.2.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.depth_conv.3.conv1.weight - torch.Size([512, 480, 1, 1]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.depth_conv.3.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.depth_conv.3.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.depth_conv.4.weight - torch.Size([88, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_view_transformer.depth_net.depth_conv.4.bias - torch.Size([88]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_bev_encoder_backbone.layers.0.0.conv1.conv.weight - torch.Size([32, 64, 3, 3, 3]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_bev_encoder_backbone.layers.0.0.conv1.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_bev_encoder_backbone.layers.0.0.conv1.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_bev_encoder_backbone.layers.0.0.conv2.conv.weight - torch.Size([32, 32, 3, 3, 3]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_bev_encoder_backbone.layers.0.0.conv2.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_bev_encoder_backbone.layers.0.0.conv2.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_bev_encoder_backbone.layers.0.0.downsample.conv.weight - torch.Size([32, 64, 3, 3, 3]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_bev_encoder_backbone.layers.0.0.downsample.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_bev_encoder_backbone.layers.0.0.downsample.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_bev_encoder_backbone.layers.1.0.conv1.conv.weight - torch.Size([64, 32, 3, 3, 3]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_bev_encoder_backbone.layers.1.0.conv1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_bev_encoder_backbone.layers.1.0.conv1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_bev_encoder_backbone.layers.1.0.conv2.conv.weight - torch.Size([64, 64, 3, 3, 3]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_bev_encoder_backbone.layers.1.0.conv2.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_bev_encoder_backbone.layers.1.0.conv2.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_bev_encoder_backbone.layers.1.0.downsample.conv.weight - torch.Size([64, 32, 3, 3, 3]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_bev_encoder_backbone.layers.1.0.downsample.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_bev_encoder_backbone.layers.1.0.downsample.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_bev_encoder_backbone.layers.1.1.conv1.conv.weight - torch.Size([64, 64, 3, 3, 3]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_bev_encoder_backbone.layers.1.1.conv1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_bev_encoder_backbone.layers.1.1.conv1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_bev_encoder_backbone.layers.1.1.conv2.conv.weight - torch.Size([64, 64, 3, 3, 3]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_bev_encoder_backbone.layers.1.1.conv2.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_bev_encoder_backbone.layers.1.1.conv2.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_bev_encoder_backbone.layers.2.0.conv1.conv.weight - torch.Size([128, 64, 3, 3, 3]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_bev_encoder_backbone.layers.2.0.conv1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_bev_encoder_backbone.layers.2.0.conv1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_bev_encoder_backbone.layers.2.0.conv2.conv.weight - torch.Size([128, 128, 3, 3, 3]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_bev_encoder_backbone.layers.2.0.conv2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_bev_encoder_backbone.layers.2.0.conv2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_bev_encoder_backbone.layers.2.0.downsample.conv.weight - torch.Size([128, 64, 3, 3, 3]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_bev_encoder_backbone.layers.2.0.downsample.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_bev_encoder_backbone.layers.2.0.downsample.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_bev_encoder_backbone.layers.2.1.conv1.conv.weight - torch.Size([128, 128, 3, 3, 3]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_bev_encoder_backbone.layers.2.1.conv1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_bev_encoder_backbone.layers.2.1.conv1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_bev_encoder_backbone.layers.2.1.conv2.conv.weight - torch.Size([128, 128, 3, 3, 3]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_bev_encoder_backbone.layers.2.1.conv2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_bev_encoder_backbone.layers.2.1.conv2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_bev_encoder_backbone.layers.2.2.conv1.conv.weight - torch.Size([128, 128, 3, 3, 3]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_bev_encoder_backbone.layers.2.2.conv1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_bev_encoder_backbone.layers.2.2.conv1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_bev_encoder_backbone.layers.2.2.conv2.conv.weight - torch.Size([128, 128, 3, 3, 3]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_bev_encoder_backbone.layers.2.2.conv2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_bev_encoder_backbone.layers.2.2.conv2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_bev_encoder_backbone.layers.2.3.conv1.conv.weight - torch.Size([128, 128, 3, 3, 3]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_bev_encoder_backbone.layers.2.3.conv1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_bev_encoder_backbone.layers.2.3.conv1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_bev_encoder_backbone.layers.2.3.conv2.conv.weight - torch.Size([128, 128, 3, 3, 3]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_bev_encoder_backbone.layers.2.3.conv2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_bev_encoder_backbone.layers.2.3.conv2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_bev_encoder_neck.conv.conv.weight - torch.Size([32, 224, 1, 1, 1]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_bev_encoder_neck.conv.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of RenderOcc  

img_bev_encoder_neck.conv.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of RenderOcc  

pre_process_net.layers.0.0.conv1.conv.weight - torch.Size([32, 32, 3, 3, 3]): 
The value is the same before and after calling `init_weights` of RenderOcc  

pre_process_net.layers.0.0.conv1.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of RenderOcc  

pre_process_net.layers.0.0.conv1.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of RenderOcc  

pre_process_net.layers.0.0.conv2.conv.weight - torch.Size([32, 32, 3, 3, 3]): 
The value is the same before and after calling `init_weights` of RenderOcc  

pre_process_net.layers.0.0.conv2.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of RenderOcc  

pre_process_net.layers.0.0.conv2.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of RenderOcc  

pre_process_net.layers.0.0.downsample.conv.weight - torch.Size([32, 32, 3, 3, 3]): 
The value is the same before and after calling `init_weights` of RenderOcc  

pre_process_net.layers.0.0.downsample.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of RenderOcc  

pre_process_net.layers.0.0.downsample.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of RenderOcc  

final_conv.conv.weight - torch.Size([32, 32, 3, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

final_conv.conv.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of RenderOcc  

density_mlp.0.weight - torch.Size([64, 32]): 
The value is the same before and after calling `init_weights` of RenderOcc  

density_mlp.0.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RenderOcc  

density_mlp.2.weight - torch.Size([2, 64]): 
The value is the same before and after calling `init_weights` of RenderOcc  

density_mlp.2.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of RenderOcc  

semantic_mlp.0.weight - torch.Size([64, 32]): 
The value is the same before and after calling `init_weights` of RenderOcc  

semantic_mlp.0.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RenderOcc  

semantic_mlp.2.weight - torch.Size([17, 64]): 
The value is the same before and after calling `init_weights` of RenderOcc  

semantic_mlp.2.bias - torch.Size([17]): 
The value is the same before and after calling `init_weights` of RenderOcc  
2024-07-19 10:16:01,476 - mmdet - INFO - load checkpoint from local path: ./ckpts/bevdet-stbase-4d-stereo-512x1408-cbgs.pth
2024-07-19 10:16:02,919 - mmdet - WARNING - The model and loaded state dict do not match exactly

size mismatch for img_view_transformer.depth_net.context_conv.weight: copying a param with shape torch.Size([80, 512, 1, 1]) from checkpoint, the shape in current model is torch.Size([32, 512, 1, 1]).
size mismatch for img_view_transformer.depth_net.context_conv.bias: copying a param with shape torch.Size([80]) from checkpoint, the shape in current model is torch.Size([32]).
size mismatch for img_view_transformer.depth_net.cost_volumn_net.0.weight: copying a param with shape torch.Size([118, 118, 3, 3]) from checkpoint, the shape in current model is torch.Size([88, 88, 3, 3]).
size mismatch for img_view_transformer.depth_net.cost_volumn_net.0.bias: copying a param with shape torch.Size([118]) from checkpoint, the shape in current model is torch.Size([88]).
size mismatch for img_view_transformer.depth_net.cost_volumn_net.1.weight: copying a param with shape torch.Size([118]) from checkpoint, the shape in current model is torch.Size([88]).
size mismatch for img_view_transformer.depth_net.cost_volumn_net.1.bias: copying a param with shape torch.Size([118]) from checkpoint, the shape in current model is torch.Size([88]).
size mismatch for img_view_transformer.depth_net.cost_volumn_net.1.running_mean: copying a param with shape torch.Size([118]) from checkpoint, the shape in current model is torch.Size([88]).
size mismatch for img_view_transformer.depth_net.cost_volumn_net.1.running_var: copying a param with shape torch.Size([118]) from checkpoint, the shape in current model is torch.Size([88]).
size mismatch for img_view_transformer.depth_net.cost_volumn_net.2.weight: copying a param with shape torch.Size([118, 118, 3, 3]) from checkpoint, the shape in current model is torch.Size([88, 88, 3, 3]).
size mismatch for img_view_transformer.depth_net.cost_volumn_net.2.bias: copying a param with shape torch.Size([118]) from checkpoint, the shape in current model is torch.Size([88]).
size mismatch for img_view_transformer.depth_net.cost_volumn_net.3.weight: copying a param with shape torch.Size([118]) from checkpoint, the shape in current model is torch.Size([88]).
size mismatch for img_view_transformer.depth_net.cost_volumn_net.3.bias: copying a param with shape torch.Size([118]) from checkpoint, the shape in current model is torch.Size([88]).
size mismatch for img_view_transformer.depth_net.cost_volumn_net.3.running_mean: copying a param with shape torch.Size([118]) from checkpoint, the shape in current model is torch.Size([88]).
size mismatch for img_view_transformer.depth_net.cost_volumn_net.3.running_var: copying a param with shape torch.Size([118]) from checkpoint, the shape in current model is torch.Size([88]).
size mismatch for img_view_transformer.depth_net.depth_conv.0.conv1.weight: copying a param with shape torch.Size([512, 630, 3, 3]) from checkpoint, the shape in current model is torch.Size([512, 600, 3, 3]).
size mismatch for img_view_transformer.depth_net.depth_conv.0.downsample.weight: copying a param with shape torch.Size([512, 630, 1, 1]) from checkpoint, the shape in current model is torch.Size([512, 600, 1, 1]).
size mismatch for img_view_transformer.depth_net.depth_conv.4.weight: copying a param with shape torch.Size([118, 512, 1, 1]) from checkpoint, the shape in current model is torch.Size([88, 512, 1, 1]).
size mismatch for img_view_transformer.depth_net.depth_conv.4.bias: copying a param with shape torch.Size([118]) from checkpoint, the shape in current model is torch.Size([88]).
unexpected key in source state_dict: pts_bbox_head.shared_conv.conv.weight, pts_bbox_head.shared_conv.bn.weight, pts_bbox_head.shared_conv.bn.bias, pts_bbox_head.shared_conv.bn.running_mean, pts_bbox_head.shared_conv.bn.running_var, pts_bbox_head.shared_conv.bn.num_batches_tracked, pts_bbox_head.task_heads.0.reg.0.conv.weight, pts_bbox_head.task_heads.0.reg.0.bn.weight, pts_bbox_head.task_heads.0.reg.0.bn.bias, pts_bbox_head.task_heads.0.reg.0.bn.running_mean, pts_bbox_head.task_heads.0.reg.0.bn.running_var, pts_bbox_head.task_heads.0.reg.0.bn.num_batches_tracked, pts_bbox_head.task_heads.0.reg.1.weight, pts_bbox_head.task_heads.0.reg.1.bias, pts_bbox_head.task_heads.0.height.0.conv.weight, pts_bbox_head.task_heads.0.height.0.bn.weight, pts_bbox_head.task_heads.0.height.0.bn.bias, pts_bbox_head.task_heads.0.height.0.bn.running_mean, pts_bbox_head.task_heads.0.height.0.bn.running_var, pts_bbox_head.task_heads.0.height.0.bn.num_batches_tracked, pts_bbox_head.task_heads.0.height.1.weight, pts_bbox_head.task_heads.0.height.1.bias, pts_bbox_head.task_heads.0.dim.0.conv.weight, pts_bbox_head.task_heads.0.dim.0.bn.weight, pts_bbox_head.task_heads.0.dim.0.bn.bias, pts_bbox_head.task_heads.0.dim.0.bn.running_mean, pts_bbox_head.task_heads.0.dim.0.bn.running_var, pts_bbox_head.task_heads.0.dim.0.bn.num_batches_tracked, pts_bbox_head.task_heads.0.dim.1.weight, pts_bbox_head.task_heads.0.dim.1.bias, pts_bbox_head.task_heads.0.rot.0.conv.weight, pts_bbox_head.task_heads.0.rot.0.bn.weight, pts_bbox_head.task_heads.0.rot.0.bn.bias, pts_bbox_head.task_heads.0.rot.0.bn.running_mean, pts_bbox_head.task_heads.0.rot.0.bn.running_var, pts_bbox_head.task_heads.0.rot.0.bn.num_batches_tracked, pts_bbox_head.task_heads.0.rot.1.weight, pts_bbox_head.task_heads.0.rot.1.bias, pts_bbox_head.task_heads.0.vel.0.conv.weight, pts_bbox_head.task_heads.0.vel.0.bn.weight, pts_bbox_head.task_heads.0.vel.0.bn.bias, pts_bbox_head.task_heads.0.vel.0.bn.running_mean, pts_bbox_head.task_heads.0.vel.0.bn.running_var, pts_bbox_head.task_heads.0.vel.0.bn.num_batches_tracked, pts_bbox_head.task_heads.0.vel.1.weight, pts_bbox_head.task_heads.0.vel.1.bias, pts_bbox_head.task_heads.0.heatmap.0.conv.weight, pts_bbox_head.task_heads.0.heatmap.0.bn.weight, pts_bbox_head.task_heads.0.heatmap.0.bn.bias, pts_bbox_head.task_heads.0.heatmap.0.bn.running_mean, pts_bbox_head.task_heads.0.heatmap.0.bn.running_var, pts_bbox_head.task_heads.0.heatmap.0.bn.num_batches_tracked, pts_bbox_head.task_heads.0.heatmap.1.weight, pts_bbox_head.task_heads.0.heatmap.1.bias, pts_bbox_head.task_heads.1.reg.0.conv.weight, pts_bbox_head.task_heads.1.reg.0.bn.weight, pts_bbox_head.task_heads.1.reg.0.bn.bias, pts_bbox_head.task_heads.1.reg.0.bn.running_mean, pts_bbox_head.task_heads.1.reg.0.bn.running_var, pts_bbox_head.task_heads.1.reg.0.bn.num_batches_tracked, pts_bbox_head.task_heads.1.reg.1.weight, pts_bbox_head.task_heads.1.reg.1.bias, pts_bbox_head.task_heads.1.height.0.conv.weight, pts_bbox_head.task_heads.1.height.0.bn.weight, pts_bbox_head.task_heads.1.height.0.bn.bias, pts_bbox_head.task_heads.1.height.0.bn.running_mean, pts_bbox_head.task_heads.1.height.0.bn.running_var, pts_bbox_head.task_heads.1.height.0.bn.num_batches_tracked, pts_bbox_head.task_heads.1.height.1.weight, pts_bbox_head.task_heads.1.height.1.bias, pts_bbox_head.task_heads.1.dim.0.conv.weight, pts_bbox_head.task_heads.1.dim.0.bn.weight, pts_bbox_head.task_heads.1.dim.0.bn.bias, pts_bbox_head.task_heads.1.dim.0.bn.running_mean, pts_bbox_head.task_heads.1.dim.0.bn.running_var, pts_bbox_head.task_heads.1.dim.0.bn.num_batches_tracked, pts_bbox_head.task_heads.1.dim.1.weight, pts_bbox_head.task_heads.1.dim.1.bias, pts_bbox_head.task_heads.1.rot.0.conv.weight, pts_bbox_head.task_heads.1.rot.0.bn.weight, pts_bbox_head.task_heads.1.rot.0.bn.bias, pts_bbox_head.task_heads.1.rot.0.bn.running_mean, pts_bbox_head.task_heads.1.rot.0.bn.running_var, pts_bbox_head.task_heads.1.rot.0.bn.num_batches_tracked, pts_bbox_head.task_heads.1.rot.1.weight, pts_bbox_head.task_heads.1.rot.1.bias, pts_bbox_head.task_heads.1.vel.0.conv.weight, pts_bbox_head.task_heads.1.vel.0.bn.weight, pts_bbox_head.task_heads.1.vel.0.bn.bias, pts_bbox_head.task_heads.1.vel.0.bn.running_mean, pts_bbox_head.task_heads.1.vel.0.bn.running_var, pts_bbox_head.task_heads.1.vel.0.bn.num_batches_tracked, pts_bbox_head.task_heads.1.vel.1.weight, pts_bbox_head.task_heads.1.vel.1.bias, pts_bbox_head.task_heads.1.heatmap.0.conv.weight, pts_bbox_head.task_heads.1.heatmap.0.bn.weight, pts_bbox_head.task_heads.1.heatmap.0.bn.bias, pts_bbox_head.task_heads.1.heatmap.0.bn.running_mean, pts_bbox_head.task_heads.1.heatmap.0.bn.running_var, pts_bbox_head.task_heads.1.heatmap.0.bn.num_batches_tracked, pts_bbox_head.task_heads.1.heatmap.1.weight, pts_bbox_head.task_heads.1.heatmap.1.bias, pts_bbox_head.task_heads.2.reg.0.conv.weight, pts_bbox_head.task_heads.2.reg.0.bn.weight, pts_bbox_head.task_heads.2.reg.0.bn.bias, pts_bbox_head.task_heads.2.reg.0.bn.running_mean, pts_bbox_head.task_heads.2.reg.0.bn.running_var, pts_bbox_head.task_heads.2.reg.0.bn.num_batches_tracked, pts_bbox_head.task_heads.2.reg.1.weight, pts_bbox_head.task_heads.2.reg.1.bias, pts_bbox_head.task_heads.2.height.0.conv.weight, pts_bbox_head.task_heads.2.height.0.bn.weight, pts_bbox_head.task_heads.2.height.0.bn.bias, pts_bbox_head.task_heads.2.height.0.bn.running_mean, pts_bbox_head.task_heads.2.height.0.bn.running_var, pts_bbox_head.task_heads.2.height.0.bn.num_batches_tracked, pts_bbox_head.task_heads.2.height.1.weight, pts_bbox_head.task_heads.2.height.1.bias, pts_bbox_head.task_heads.2.dim.0.conv.weight, pts_bbox_head.task_heads.2.dim.0.bn.weight, pts_bbox_head.task_heads.2.dim.0.bn.bias, pts_bbox_head.task_heads.2.dim.0.bn.running_mean, pts_bbox_head.task_heads.2.dim.0.bn.running_var, pts_bbox_head.task_heads.2.dim.0.bn.num_batches_tracked, pts_bbox_head.task_heads.2.dim.1.weight, pts_bbox_head.task_heads.2.dim.1.bias, pts_bbox_head.task_heads.2.rot.0.conv.weight, pts_bbox_head.task_heads.2.rot.0.bn.weight, pts_bbox_head.task_heads.2.rot.0.bn.bias, pts_bbox_head.task_heads.2.rot.0.bn.running_mean, pts_bbox_head.task_heads.2.rot.0.bn.running_var, pts_bbox_head.task_heads.2.rot.0.bn.num_batches_tracked, pts_bbox_head.task_heads.2.rot.1.weight, pts_bbox_head.task_heads.2.rot.1.bias, pts_bbox_head.task_heads.2.vel.0.conv.weight, pts_bbox_head.task_heads.2.vel.0.bn.weight, pts_bbox_head.task_heads.2.vel.0.bn.bias, pts_bbox_head.task_heads.2.vel.0.bn.running_mean, pts_bbox_head.task_heads.2.vel.0.bn.running_var, pts_bbox_head.task_heads.2.vel.0.bn.num_batches_tracked, pts_bbox_head.task_heads.2.vel.1.weight, pts_bbox_head.task_heads.2.vel.1.bias, pts_bbox_head.task_heads.2.heatmap.0.conv.weight, pts_bbox_head.task_heads.2.heatmap.0.bn.weight, pts_bbox_head.task_heads.2.heatmap.0.bn.bias, pts_bbox_head.task_heads.2.heatmap.0.bn.running_mean, pts_bbox_head.task_heads.2.heatmap.0.bn.running_var, pts_bbox_head.task_heads.2.heatmap.0.bn.num_batches_tracked, pts_bbox_head.task_heads.2.heatmap.1.weight, pts_bbox_head.task_heads.2.heatmap.1.bias, pts_bbox_head.task_heads.3.reg.0.conv.weight, pts_bbox_head.task_heads.3.reg.0.bn.weight, pts_bbox_head.task_heads.3.reg.0.bn.bias, pts_bbox_head.task_heads.3.reg.0.bn.running_mean, pts_bbox_head.task_heads.3.reg.0.bn.running_var, pts_bbox_head.task_heads.3.reg.0.bn.num_batches_tracked, pts_bbox_head.task_heads.3.reg.1.weight, pts_bbox_head.task_heads.3.reg.1.bias, pts_bbox_head.task_heads.3.height.0.conv.weight, pts_bbox_head.task_heads.3.height.0.bn.weight, pts_bbox_head.task_heads.3.height.0.bn.bias, pts_bbox_head.task_heads.3.height.0.bn.running_mean, pts_bbox_head.task_heads.3.height.0.bn.running_var, pts_bbox_head.task_heads.3.height.0.bn.num_batches_tracked, pts_bbox_head.task_heads.3.height.1.weight, pts_bbox_head.task_heads.3.height.1.bias, pts_bbox_head.task_heads.3.dim.0.conv.weight, pts_bbox_head.task_heads.3.dim.0.bn.weight, pts_bbox_head.task_heads.3.dim.0.bn.bias, pts_bbox_head.task_heads.3.dim.0.bn.running_mean, pts_bbox_head.task_heads.3.dim.0.bn.running_var, pts_bbox_head.task_heads.3.dim.0.bn.num_batches_tracked, pts_bbox_head.task_heads.3.dim.1.weight, pts_bbox_head.task_heads.3.dim.1.bias, pts_bbox_head.task_heads.3.rot.0.conv.weight, pts_bbox_head.task_heads.3.rot.0.bn.weight, pts_bbox_head.task_heads.3.rot.0.bn.bias, pts_bbox_head.task_heads.3.rot.0.bn.running_mean, pts_bbox_head.task_heads.3.rot.0.bn.running_var, pts_bbox_head.task_heads.3.rot.0.bn.num_batches_tracked, pts_bbox_head.task_heads.3.rot.1.weight, pts_bbox_head.task_heads.3.rot.1.bias, pts_bbox_head.task_heads.3.vel.0.conv.weight, pts_bbox_head.task_heads.3.vel.0.bn.weight, pts_bbox_head.task_heads.3.vel.0.bn.bias, pts_bbox_head.task_heads.3.vel.0.bn.running_mean, pts_bbox_head.task_heads.3.vel.0.bn.running_var, pts_bbox_head.task_heads.3.vel.0.bn.num_batches_tracked, pts_bbox_head.task_heads.3.vel.1.weight, pts_bbox_head.task_heads.3.vel.1.bias, pts_bbox_head.task_heads.3.heatmap.0.conv.weight, pts_bbox_head.task_heads.3.heatmap.0.bn.weight, pts_bbox_head.task_heads.3.heatmap.0.bn.bias, pts_bbox_head.task_heads.3.heatmap.0.bn.running_mean, pts_bbox_head.task_heads.3.heatmap.0.bn.running_var, pts_bbox_head.task_heads.3.heatmap.0.bn.num_batches_tracked, pts_bbox_head.task_heads.3.heatmap.1.weight, pts_bbox_head.task_heads.3.heatmap.1.bias, pts_bbox_head.task_heads.4.reg.0.conv.weight, pts_bbox_head.task_heads.4.reg.0.bn.weight, pts_bbox_head.task_heads.4.reg.0.bn.bias, pts_bbox_head.task_heads.4.reg.0.bn.running_mean, pts_bbox_head.task_heads.4.reg.0.bn.running_var, pts_bbox_head.task_heads.4.reg.0.bn.num_batches_tracked, pts_bbox_head.task_heads.4.reg.1.weight, pts_bbox_head.task_heads.4.reg.1.bias, pts_bbox_head.task_heads.4.height.0.conv.weight, pts_bbox_head.task_heads.4.height.0.bn.weight, pts_bbox_head.task_heads.4.height.0.bn.bias, pts_bbox_head.task_heads.4.height.0.bn.running_mean, pts_bbox_head.task_heads.4.height.0.bn.running_var, pts_bbox_head.task_heads.4.height.0.bn.num_batches_tracked, pts_bbox_head.task_heads.4.height.1.weight, pts_bbox_head.task_heads.4.height.1.bias, pts_bbox_head.task_heads.4.dim.0.conv.weight, pts_bbox_head.task_heads.4.dim.0.bn.weight, pts_bbox_head.task_heads.4.dim.0.bn.bias, pts_bbox_head.task_heads.4.dim.0.bn.running_mean, pts_bbox_head.task_heads.4.dim.0.bn.running_var, pts_bbox_head.task_heads.4.dim.0.bn.num_batches_tracked, pts_bbox_head.task_heads.4.dim.1.weight, pts_bbox_head.task_heads.4.dim.1.bias, pts_bbox_head.task_heads.4.rot.0.conv.weight, pts_bbox_head.task_heads.4.rot.0.bn.weight, pts_bbox_head.task_heads.4.rot.0.bn.bias, pts_bbox_head.task_heads.4.rot.0.bn.running_mean, pts_bbox_head.task_heads.4.rot.0.bn.running_var, pts_bbox_head.task_heads.4.rot.0.bn.num_batches_tracked, pts_bbox_head.task_heads.4.rot.1.weight, pts_bbox_head.task_heads.4.rot.1.bias, pts_bbox_head.task_heads.4.vel.0.conv.weight, pts_bbox_head.task_heads.4.vel.0.bn.weight, pts_bbox_head.task_heads.4.vel.0.bn.bias, pts_bbox_head.task_heads.4.vel.0.bn.running_mean, pts_bbox_head.task_heads.4.vel.0.bn.running_var, pts_bbox_head.task_heads.4.vel.0.bn.num_batches_tracked, pts_bbox_head.task_heads.4.vel.1.weight, pts_bbox_head.task_heads.4.vel.1.bias, pts_bbox_head.task_heads.4.heatmap.0.conv.weight, pts_bbox_head.task_heads.4.heatmap.0.bn.weight, pts_bbox_head.task_heads.4.heatmap.0.bn.bias, pts_bbox_head.task_heads.4.heatmap.0.bn.running_mean, pts_bbox_head.task_heads.4.heatmap.0.bn.running_var, pts_bbox_head.task_heads.4.heatmap.0.bn.num_batches_tracked, pts_bbox_head.task_heads.4.heatmap.1.weight, pts_bbox_head.task_heads.4.heatmap.1.bias, pts_bbox_head.task_heads.5.reg.0.conv.weight, pts_bbox_head.task_heads.5.reg.0.bn.weight, pts_bbox_head.task_heads.5.reg.0.bn.bias, pts_bbox_head.task_heads.5.reg.0.bn.running_mean, pts_bbox_head.task_heads.5.reg.0.bn.running_var, pts_bbox_head.task_heads.5.reg.0.bn.num_batches_tracked, pts_bbox_head.task_heads.5.reg.1.weight, pts_bbox_head.task_heads.5.reg.1.bias, pts_bbox_head.task_heads.5.height.0.conv.weight, pts_bbox_head.task_heads.5.height.0.bn.weight, pts_bbox_head.task_heads.5.height.0.bn.bias, pts_bbox_head.task_heads.5.height.0.bn.running_mean, pts_bbox_head.task_heads.5.height.0.bn.running_var, pts_bbox_head.task_heads.5.height.0.bn.num_batches_tracked, pts_bbox_head.task_heads.5.height.1.weight, pts_bbox_head.task_heads.5.height.1.bias, pts_bbox_head.task_heads.5.dim.0.conv.weight, pts_bbox_head.task_heads.5.dim.0.bn.weight, pts_bbox_head.task_heads.5.dim.0.bn.bias, pts_bbox_head.task_heads.5.dim.0.bn.running_mean, pts_bbox_head.task_heads.5.dim.0.bn.running_var, pts_bbox_head.task_heads.5.dim.0.bn.num_batches_tracked, pts_bbox_head.task_heads.5.dim.1.weight, pts_bbox_head.task_heads.5.dim.1.bias, pts_bbox_head.task_heads.5.rot.0.conv.weight, pts_bbox_head.task_heads.5.rot.0.bn.weight, pts_bbox_head.task_heads.5.rot.0.bn.bias, pts_bbox_head.task_heads.5.rot.0.bn.running_mean, pts_bbox_head.task_heads.5.rot.0.bn.running_var, pts_bbox_head.task_heads.5.rot.0.bn.num_batches_tracked, pts_bbox_head.task_heads.5.rot.1.weight, pts_bbox_head.task_heads.5.rot.1.bias, pts_bbox_head.task_heads.5.vel.0.conv.weight, pts_bbox_head.task_heads.5.vel.0.bn.weight, pts_bbox_head.task_heads.5.vel.0.bn.bias, pts_bbox_head.task_heads.5.vel.0.bn.running_mean, pts_bbox_head.task_heads.5.vel.0.bn.running_var, pts_bbox_head.task_heads.5.vel.0.bn.num_batches_tracked, pts_bbox_head.task_heads.5.vel.1.weight, pts_bbox_head.task_heads.5.vel.1.bias, pts_bbox_head.task_heads.5.heatmap.0.conv.weight, pts_bbox_head.task_heads.5.heatmap.0.bn.weight, pts_bbox_head.task_heads.5.heatmap.0.bn.bias, pts_bbox_head.task_heads.5.heatmap.0.bn.running_mean, pts_bbox_head.task_heads.5.heatmap.0.bn.running_var, pts_bbox_head.task_heads.5.heatmap.0.bn.num_batches_tracked, pts_bbox_head.task_heads.5.heatmap.1.weight, pts_bbox_head.task_heads.5.heatmap.1.bias, img_bev_encoder_backbone.layers.0.1.conv1.weight, img_bev_encoder_backbone.layers.0.1.bn1.weight, img_bev_encoder_backbone.layers.0.1.bn1.bias, img_bev_encoder_backbone.layers.0.1.bn1.running_mean, img_bev_encoder_backbone.layers.0.1.bn1.running_var, img_bev_encoder_backbone.layers.0.1.bn1.num_batches_tracked, img_bev_encoder_backbone.layers.0.1.conv2.weight, img_bev_encoder_backbone.layers.0.1.bn2.weight, img_bev_encoder_backbone.layers.0.1.bn2.bias, img_bev_encoder_backbone.layers.0.1.bn2.running_mean, img_bev_encoder_backbone.layers.0.1.bn2.running_var, img_bev_encoder_backbone.layers.0.1.bn2.num_batches_tracked, img_bev_encoder_backbone.layers.0.0.bn1.weight, img_bev_encoder_backbone.layers.0.0.bn1.bias, img_bev_encoder_backbone.layers.0.0.bn1.running_mean, img_bev_encoder_backbone.layers.0.0.bn1.running_var, img_bev_encoder_backbone.layers.0.0.bn1.num_batches_tracked, img_bev_encoder_backbone.layers.0.0.bn2.weight, img_bev_encoder_backbone.layers.0.0.bn2.bias, img_bev_encoder_backbone.layers.0.0.bn2.running_mean, img_bev_encoder_backbone.layers.0.0.bn2.running_var, img_bev_encoder_backbone.layers.0.0.bn2.num_batches_tracked, img_bev_encoder_backbone.layers.0.0.conv1.weight, img_bev_encoder_backbone.layers.0.0.conv2.weight, img_bev_encoder_backbone.layers.0.0.downsample.weight, img_bev_encoder_backbone.layers.0.0.downsample.bias, img_bev_encoder_backbone.layers.1.0.bn1.weight, img_bev_encoder_backbone.layers.1.0.bn1.bias, img_bev_encoder_backbone.layers.1.0.bn1.running_mean, img_bev_encoder_backbone.layers.1.0.bn1.running_var, img_bev_encoder_backbone.layers.1.0.bn1.num_batches_tracked, img_bev_encoder_backbone.layers.1.0.bn2.weight, img_bev_encoder_backbone.layers.1.0.bn2.bias, img_bev_encoder_backbone.layers.1.0.bn2.running_mean, img_bev_encoder_backbone.layers.1.0.bn2.running_var, img_bev_encoder_backbone.layers.1.0.bn2.num_batches_tracked, img_bev_encoder_backbone.layers.1.0.conv1.weight, img_bev_encoder_backbone.layers.1.0.conv2.weight, img_bev_encoder_backbone.layers.1.0.downsample.weight, img_bev_encoder_backbone.layers.1.0.downsample.bias, img_bev_encoder_backbone.layers.1.1.bn1.weight, img_bev_encoder_backbone.layers.1.1.bn1.bias, img_bev_encoder_backbone.layers.1.1.bn1.running_mean, img_bev_encoder_backbone.layers.1.1.bn1.running_var, img_bev_encoder_backbone.layers.1.1.bn1.num_batches_tracked, img_bev_encoder_backbone.layers.1.1.bn2.weight, img_bev_encoder_backbone.layers.1.1.bn2.bias, img_bev_encoder_backbone.layers.1.1.bn2.running_mean, img_bev_encoder_backbone.layers.1.1.bn2.running_var, img_bev_encoder_backbone.layers.1.1.bn2.num_batches_tracked, img_bev_encoder_backbone.layers.1.1.conv1.weight, img_bev_encoder_backbone.layers.1.1.conv2.weight, img_bev_encoder_backbone.layers.2.0.bn1.weight, img_bev_encoder_backbone.layers.2.0.bn1.bias, img_bev_encoder_backbone.layers.2.0.bn1.running_mean, img_bev_encoder_backbone.layers.2.0.bn1.running_var, img_bev_encoder_backbone.layers.2.0.bn1.num_batches_tracked, img_bev_encoder_backbone.layers.2.0.bn2.weight, img_bev_encoder_backbone.layers.2.0.bn2.bias, img_bev_encoder_backbone.layers.2.0.bn2.running_mean, img_bev_encoder_backbone.layers.2.0.bn2.running_var, img_bev_encoder_backbone.layers.2.0.bn2.num_batches_tracked, img_bev_encoder_backbone.layers.2.0.conv1.weight, img_bev_encoder_backbone.layers.2.0.conv2.weight, img_bev_encoder_backbone.layers.2.0.downsample.weight, img_bev_encoder_backbone.layers.2.0.downsample.bias, img_bev_encoder_backbone.layers.2.1.bn1.weight, img_bev_encoder_backbone.layers.2.1.bn1.bias, img_bev_encoder_backbone.layers.2.1.bn1.running_mean, img_bev_encoder_backbone.layers.2.1.bn1.running_var, img_bev_encoder_backbone.layers.2.1.bn1.num_batches_tracked, img_bev_encoder_backbone.layers.2.1.bn2.weight, img_bev_encoder_backbone.layers.2.1.bn2.bias, img_bev_encoder_backbone.layers.2.1.bn2.running_mean, img_bev_encoder_backbone.layers.2.1.bn2.running_var, img_bev_encoder_backbone.layers.2.1.bn2.num_batches_tracked, img_bev_encoder_backbone.layers.2.1.conv1.weight, img_bev_encoder_backbone.layers.2.1.conv2.weight, img_bev_encoder_neck.up2.1.weight, img_bev_encoder_neck.up2.2.weight, img_bev_encoder_neck.up2.2.bias, img_bev_encoder_neck.up2.2.running_mean, img_bev_encoder_neck.up2.2.running_var, img_bev_encoder_neck.up2.2.num_batches_tracked, img_bev_encoder_neck.up2.4.weight, img_bev_encoder_neck.up2.4.bias, img_bev_encoder_neck.conv.0.weight, img_bev_encoder_neck.conv.1.weight, img_bev_encoder_neck.conv.1.bias, img_bev_encoder_neck.conv.1.running_mean, img_bev_encoder_neck.conv.1.running_var, img_bev_encoder_neck.conv.1.num_batches_tracked, img_bev_encoder_neck.conv.3.weight, img_bev_encoder_neck.conv.4.weight, img_bev_encoder_neck.conv.4.bias, img_bev_encoder_neck.conv.4.running_mean, img_bev_encoder_neck.conv.4.running_var, img_bev_encoder_neck.conv.4.num_batches_tracked, pre_process_net.layers.0.1.conv1.weight, pre_process_net.layers.0.1.bn1.weight, pre_process_net.layers.0.1.bn1.bias, pre_process_net.layers.0.1.bn1.running_mean, pre_process_net.layers.0.1.bn1.running_var, pre_process_net.layers.0.1.bn1.num_batches_tracked, pre_process_net.layers.0.1.conv2.weight, pre_process_net.layers.0.1.bn2.weight, pre_process_net.layers.0.1.bn2.bias, pre_process_net.layers.0.1.bn2.running_mean, pre_process_net.layers.0.1.bn2.running_var, pre_process_net.layers.0.1.bn2.num_batches_tracked, pre_process_net.layers.0.0.bn1.weight, pre_process_net.layers.0.0.bn1.bias, pre_process_net.layers.0.0.bn1.running_mean, pre_process_net.layers.0.0.bn1.running_var, pre_process_net.layers.0.0.bn1.num_batches_tracked, pre_process_net.layers.0.0.bn2.weight, pre_process_net.layers.0.0.bn2.bias, pre_process_net.layers.0.0.bn2.running_mean, pre_process_net.layers.0.0.bn2.running_var, pre_process_net.layers.0.0.bn2.num_batches_tracked, pre_process_net.layers.0.0.conv1.weight, pre_process_net.layers.0.0.conv2.weight, pre_process_net.layers.0.0.downsample.weight, pre_process_net.layers.0.0.downsample.bias

missing keys in source state_dict: img_bev_encoder_backbone.layers.0.0.conv1.conv.weight, img_bev_encoder_backbone.layers.0.0.conv1.bn.weight, img_bev_encoder_backbone.layers.0.0.conv1.bn.bias, img_bev_encoder_backbone.layers.0.0.conv1.bn.running_mean, img_bev_encoder_backbone.layers.0.0.conv1.bn.running_var, img_bev_encoder_backbone.layers.0.0.conv2.conv.weight, img_bev_encoder_backbone.layers.0.0.conv2.bn.weight, img_bev_encoder_backbone.layers.0.0.conv2.bn.bias, img_bev_encoder_backbone.layers.0.0.conv2.bn.running_mean, img_bev_encoder_backbone.layers.0.0.conv2.bn.running_var, img_bev_encoder_backbone.layers.0.0.downsample.conv.weight, img_bev_encoder_backbone.layers.0.0.downsample.bn.weight, img_bev_encoder_backbone.layers.0.0.downsample.bn.bias, img_bev_encoder_backbone.layers.0.0.downsample.bn.running_mean, img_bev_encoder_backbone.layers.0.0.downsample.bn.running_var, img_bev_encoder_backbone.layers.1.0.conv1.conv.weight, img_bev_encoder_backbone.layers.1.0.conv1.bn.weight, img_bev_encoder_backbone.layers.1.0.conv1.bn.bias, img_bev_encoder_backbone.layers.1.0.conv1.bn.running_mean, img_bev_encoder_backbone.layers.1.0.conv1.bn.running_var, img_bev_encoder_backbone.layers.1.0.conv2.conv.weight, img_bev_encoder_backbone.layers.1.0.conv2.bn.weight, img_bev_encoder_backbone.layers.1.0.conv2.bn.bias, img_bev_encoder_backbone.layers.1.0.conv2.bn.running_mean, img_bev_encoder_backbone.layers.1.0.conv2.bn.running_var, img_bev_encoder_backbone.layers.1.0.downsample.conv.weight, img_bev_encoder_backbone.layers.1.0.downsample.bn.weight, img_bev_encoder_backbone.layers.1.0.downsample.bn.bias, img_bev_encoder_backbone.layers.1.0.downsample.bn.running_mean, img_bev_encoder_backbone.layers.1.0.downsample.bn.running_var, img_bev_encoder_backbone.layers.1.1.conv1.conv.weight, img_bev_encoder_backbone.layers.1.1.conv1.bn.weight, img_bev_encoder_backbone.layers.1.1.conv1.bn.bias, img_bev_encoder_backbone.layers.1.1.conv1.bn.running_mean, img_bev_encoder_backbone.layers.1.1.conv1.bn.running_var, img_bev_encoder_backbone.layers.1.1.conv2.conv.weight, img_bev_encoder_backbone.layers.1.1.conv2.bn.weight, img_bev_encoder_backbone.layers.1.1.conv2.bn.bias, img_bev_encoder_backbone.layers.1.1.conv2.bn.running_mean, img_bev_encoder_backbone.layers.1.1.conv2.bn.running_var, img_bev_encoder_backbone.layers.2.0.conv1.conv.weight, img_bev_encoder_backbone.layers.2.0.conv1.bn.weight, img_bev_encoder_backbone.layers.2.0.conv1.bn.bias, img_bev_encoder_backbone.layers.2.0.conv1.bn.running_mean, img_bev_encoder_backbone.layers.2.0.conv1.bn.running_var, img_bev_encoder_backbone.layers.2.0.conv2.conv.weight, img_bev_encoder_backbone.layers.2.0.conv2.bn.weight, img_bev_encoder_backbone.layers.2.0.conv2.bn.bias, img_bev_encoder_backbone.layers.2.0.conv2.bn.running_mean, img_bev_encoder_backbone.layers.2.0.conv2.bn.running_var, img_bev_encoder_backbone.layers.2.0.downsample.conv.weight, img_bev_encoder_backbone.layers.2.0.downsample.bn.weight, img_bev_encoder_backbone.layers.2.0.downsample.bn.bias, img_bev_encoder_backbone.layers.2.0.downsample.bn.running_mean, img_bev_encoder_backbone.layers.2.0.downsample.bn.running_var, img_bev_encoder_backbone.layers.2.1.conv1.conv.weight, img_bev_encoder_backbone.layers.2.1.conv1.bn.weight, img_bev_encoder_backbone.layers.2.1.conv1.bn.bias, img_bev_encoder_backbone.layers.2.1.conv1.bn.running_mean, img_bev_encoder_backbone.layers.2.1.conv1.bn.running_var, img_bev_encoder_backbone.layers.2.1.conv2.conv.weight, img_bev_encoder_backbone.layers.2.1.conv2.bn.weight, img_bev_encoder_backbone.layers.2.1.conv2.bn.bias, img_bev_encoder_backbone.layers.2.1.conv2.bn.running_mean, img_bev_encoder_backbone.layers.2.1.conv2.bn.running_var, img_bev_encoder_backbone.layers.2.2.conv1.conv.weight, img_bev_encoder_backbone.layers.2.2.conv1.bn.weight, img_bev_encoder_backbone.layers.2.2.conv1.bn.bias, img_bev_encoder_backbone.layers.2.2.conv1.bn.running_mean, img_bev_encoder_backbone.layers.2.2.conv1.bn.running_var, img_bev_encoder_backbone.layers.2.2.conv2.conv.weight, img_bev_encoder_backbone.layers.2.2.conv2.bn.weight, img_bev_encoder_backbone.layers.2.2.conv2.bn.bias, img_bev_encoder_backbone.layers.2.2.conv2.bn.running_mean, img_bev_encoder_backbone.layers.2.2.conv2.bn.running_var, img_bev_encoder_backbone.layers.2.3.conv1.conv.weight, img_bev_encoder_backbone.layers.2.3.conv1.bn.weight, img_bev_encoder_backbone.layers.2.3.conv1.bn.bias, img_bev_encoder_backbone.layers.2.3.conv1.bn.running_mean, img_bev_encoder_backbone.layers.2.3.conv1.bn.running_var, img_bev_encoder_backbone.layers.2.3.conv2.conv.weight, img_bev_encoder_backbone.layers.2.3.conv2.bn.weight, img_bev_encoder_backbone.layers.2.3.conv2.bn.bias, img_bev_encoder_backbone.layers.2.3.conv2.bn.running_mean, img_bev_encoder_backbone.layers.2.3.conv2.bn.running_var, img_bev_encoder_neck.conv.conv.weight, img_bev_encoder_neck.conv.bn.weight, img_bev_encoder_neck.conv.bn.bias, img_bev_encoder_neck.conv.bn.running_mean, img_bev_encoder_neck.conv.bn.running_var, pre_process_net.layers.0.0.conv1.conv.weight, pre_process_net.layers.0.0.conv1.bn.weight, pre_process_net.layers.0.0.conv1.bn.bias, pre_process_net.layers.0.0.conv1.bn.running_mean, pre_process_net.layers.0.0.conv1.bn.running_var, pre_process_net.layers.0.0.conv2.conv.weight, pre_process_net.layers.0.0.conv2.bn.weight, pre_process_net.layers.0.0.conv2.bn.bias, pre_process_net.layers.0.0.conv2.bn.running_mean, pre_process_net.layers.0.0.conv2.bn.running_var, pre_process_net.layers.0.0.downsample.conv.weight, pre_process_net.layers.0.0.downsample.bn.weight, pre_process_net.layers.0.0.downsample.bn.bias, pre_process_net.layers.0.0.downsample.bn.running_mean, pre_process_net.layers.0.0.downsample.bn.running_var, final_conv.conv.weight, final_conv.conv.bias, semantic_loss.weight, density_mlp.0.weight, density_mlp.0.bias, density_mlp.2.weight, density_mlp.2.bias, semantic_mlp.0.weight, semantic_mlp.0.bias, semantic_mlp.2.weight, semantic_mlp.2.bias, nerf_head.scene_center, nerf_head.scene_radius, nerf_head.xyz_min, nerf_head.xyz_max, nerf_head.act_shift

2024-07-19 10:16:02,935 - mmdet - INFO - Start running, host: pengwan5@dsw-4392-788566f7d4-wx58n, work_dir: /cpfs/user/pengwan5/RenderOcc/RenderOcc/work_dirs/renderocc-7frame
2024-07-19 10:16:02,935 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) MEGVIIEMAHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) SyncbnControlHook                  
(NORMAL      ) DistSamplerSeedHook                
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(NORMAL      ) MEGVIIEMAHook                      
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(NORMAL      ) MEGVIIEMAHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_val_epoch:
(NORMAL      ) DistSamplerSeedHook                
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
2024-07-19 10:16:02,936 - mmdet - INFO - workflow: [('train', 1)], max: 12 epochs
2024-07-19 10:16:02,936 - mmdet - INFO - Checkpoints will be saved to /cpfs/user/pengwan5/RenderOcc/RenderOcc/work_dirs/renderocc-7frame by HardDiskBackend.
